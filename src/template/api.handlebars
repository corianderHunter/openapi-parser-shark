// tslint:disable

import { AxiosInstance } from 'axios';
import fetch from '{{> servicePath}}';

{{#each components.schemas}}
/**
 *
 * @summary {{> getOriginalProp @key}}
 {{#if this.enum}}
 * @enum {{@key}}
 {{/if}}
 {{#unless this.enum}}
 * @interface {{@key}}
 {{/unless}}
 */
{{#if this.enum}}
export enum {{@key}} {
    {{#each this.enum}}
    {{this}}='{{this}}',
    {{/each}}
}

{{/if}}
{{#unless this.enum}}
export interface {{@key}} {
    {{#each this.properties}}
    /**
     * {{this.description}}
     * @type { {{> transformSchema this}} }
     * @memberof {{@../key}}
     */
    ['{{@key}}']{{> isRequired source=../this.required target=@key}}:{{> transformSchema this}};
    {{/each}}
}

{{/unless}}
{{/each}}
{{#each components.requestBodies}}
{{#if (isRef content)}}
{{#unless (isTypeNameEqual @key content)}}
/**
 * 
 * @summary {{> getOriginalProp @key}}
 * @interface {{@key}}
 * @description {{description}}
 * @required {{required}}
 */
export type {{@key}} = {{> linkRef content}}

{{/unless}}
{{else}}
{{/if}}
{{#unless (isRef content)}}
{{#if this.enum}}
/**
 * 
 * @summary {{> getOriginalProp @key}}
 * @interface {{@key}}
 * @description {{description}}
 * @required {{required}}
 */
export enum {{@key}} {
    {{#each this.enum}}
    {{this}}='{{this}}',
    {{/each}}
}

{{/if}}
{{#unless this.enum}}
/**
 * 
 * @summary {{> getOriginalProp @key}}
 * @interface {{@key}}
 * @description {{description}}
 * @required {{required}}
 */
export interface {{@key}} {
    {{#each this.properties}}
    /**
     * {{this.description}}
     * @type { {{> transformSchema this}} }
     * @memberof {{@../key}}
     */
    ['{{@key}}']{{> isRequired source=../this.required target=@key}}:{{> transformSchema this}};
    {{/each}}
}

{{/unless}}
{{/unless}}

{{/each}}
{{#each paths}}
{{#each this}}
{{#if (isMethod @key)}}
/**
 * @tags {{#each tags}}{{this}}{{/each}}
 * @summary {{summary}}
 {{> getAllParamsComment operationObject=this method=@key}}
 * @param {AxiosInstance} local_options
 */
export const {{> generateMethodName path=@../key method=@key}} = async ({{> getAllParams operationObject=this method=@key}}local_options?:AxiosInstance):Promise<{{> responseType responses}}>=>{
  let local_url = '{{@../key}}'
  {{> getParamsPartial path=@../key operationObject=this method=@key}}
  const result = await fetch({
    url:local_url,
    method:'{{@key}}',
    params:local_params,
    {{#unless (isSimpleMethod @key)}}data:local_body,{{/unless}}
    ...(local_options||{})
  }) as unknown
  return result as Promise<{{> responseType responses}}>
}

{{/if}}
{{/each}}
{{/each}}